name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]

jobs:
  Build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Rebecca151205
          POSTGRES_DB: cesizen
        ports:
          - 5432:5432
    steps:
      - run: echo "Ce job a √©t√© d√©clench√© automatiquement par un √©v√©nement  ${{ github.event_name }}."
      - run: echo "Ce job s'ex√©cute maintenant sur un serveur ${{ runner.os }} herberg√© par GitHub!"
      - run: echo "Le nom de votre branche est ${{ github.ref }} et votre d√©p√¥t est ${{ github.repository }}."
      - name: Attendre que PostgreSQL soit pr√™t
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Attente de PostgreSQL..."
            sleep 2
          done
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "Le d√©p√¥t ${{ github.repository }} a √©t√© clon√© sur l'environnement d'ex√©cution."
      - run: echo "üñ•Ô∏è Le workflow est maintenant pr√™t √† tester le code sur cet environnement"
      - name: Set environment variable
        run: echo DATABASE_URL="postgresql://postgres:Rebecca151205@localhost:5432/cesizen?schema=public" >> $GITHUB_ENV
      - name: install dependencies
        run: npm clean-install
      - name: Apply Prisma migrations
        run: npx prisma migrate deploy
      - name: Verify Prisma schema (Optional)
        run: npx prisma db push # Ensure database schema is correct

      - name: Build
        run: npm run build
      - run: echo "Le status du job est d√©sormais ${{ job.status }}."
      - name: Save  cache (node_modules)
        id: cache-primes-save
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }} ##{ hashFiles('**/package-lock.json') }}
  Test_Api:
    runs-on: ubuntu-latest
    needs:
      - Build
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        id: cache-primes-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }}
      - run: echo "Le workflow est maintenant pr√™t √† faire le test unitaire des APIs du code sur l'environnement d'ex√©cution."
      - name: run API tests
        run: npm test
      - name: Publish Jest Test Results
        uses: test-summary/action@v2
        if: always()
        with:
          paths: "test-results/jest-junit.xml"

  Test_Component:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, chromium, edge, electron]
    needs:
      - Test_Api
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        id: cache-primes-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }}

      - run: echo "Le workflow est maintenant pr√™t √† faire le test unitaire des composants du code sur l'environnement d'ex√©cution."

      - run: echo "Le status du job est d√©sormais ${{ job.status }}."
      - uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          browser: ${{ matrix.browser }}
          component: true
          headed: false

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Download cypress test videos on ${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}
          path: cypress/videos/
          retention-days: 5
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Download cypress test failed screenshots on ${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 5

  Test_E2E:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Rebecca151205
          POSTGRES_DB: cesizen
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        browser: [chrome, chromium, edge, electron]
    needs:
      - Test_Component
    env:
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      DATABASE_URL: postgresql://postgres:Rebecca151205@localhost:5432/cesizen

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        id: cache-primes-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}--node-modules-${{ hashFiles('**/package-lock.json') }}

      - run: echo "Le status du job est d√©sormais ${{ job.status }}."
      - name: Generate Prisma client
        run: npx prisma generate
      - name: Deploy and migrate Prisma client
        run: npx prisma migrate deploy

      - name: Run diagnostics script
        run: npm run diagnostics
      - name: Run detentes script
        run: npm run detentes
      - name: Run utilisateurs script
        run: npm run utilisateurs
      - uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          browser: ${{ matrix.browser }}

          e2e: true

          headed: false

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Download cypress test videos on ${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}

          path: cypress/videos/
          retention-days: 5
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Download cypress test failed screenshots on ${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 5

  build-push-check-docker:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.pass_version.outputs.version }}

    #if: github.ref_name == 'master'
    #needs: Test_E2E
    permissions:
      contents: read
      packages: write
      actions: read
      security-events: write
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Obtenir la version depuis notre fichier package.json
        id: get_version
        run: echo "PACKAGE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
      - name: Sauverde de la version pour l'utiliser dans d'autres √©tapes
        id: pass_version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          secrets: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}-${{ github.ref_name }}:v${{ env.PACKAGE_VERSION }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}
      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: sarif.output.json
          summary: true

      - name: Upload SARIF result
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        id: upload-sarif
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json

      #      - name: Installer les d√©pendances
      #        run: npm install rss-parser fs

      - name: Lancer le script de veille
        run: npm run veille-techno

  deploy-develop:
    runs-on: ubuntu-latest
    needs: build-push-check-docker
    if: github.ref == 'refs/heads/develop' # Ex√©cuter uniquement sur develop
    environment:
      name: develop
      url: http://ec2-107-23-85-12.compute-1.amazonaws.com:3000
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd test
            sed -i '/^VERSION=/d' .env  # Supprime toutes les lignes VERSION existantes
            echo "VERSION=v${{ needs.build-push-check-docker.outputs.version }}" >> .env
            docker compose -f docker-compose.test.yml pull
            docker compose -f docker-compose.test.yml up -d

  deploy-prod:
    runs-on: ubuntu-latest
    needs:
      - build-push-check-docker
    if: github.ref == 'refs/heads/master' # Ex√©cuter uniquement sur master

    environment:
      name: prod
      url: http://ec2-107-23-85-12.compute-1.amazonaws.com
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd prod
            sed -i '/^VERSION=/d' .env  # Supprime toutes les lignes VERSION existantes
            echo "VERSION=v${{ needs.build-push-check-docker.outputs.version }}" >> .env
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
