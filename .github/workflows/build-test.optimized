name: CI Pipeline
run-name: ${{ github.actor }} is testing Cesizen üß™

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Rebecca151205
          POSTGRES_DB: cesizen
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      # ‚è±Ô∏è Use built-in caching with setup-node
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm  # üéØ Simplifies and speeds up dependency restoration

      - run: npm ci  # üßπ Faster and safer install for CI than npm install

      # üïì Wait until PostgreSQL is accepting connections
      - name: Wait for PostgreSQL
        run: until pg_isready -h localhost -p 5432; do echo "Waiting..."; sleep 2; done

      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=postgresql://postgres:Rebecca151205@localhost:5432/cesizen?schema=public" >> $GITHUB_ENV

      - run: npx prisma migrate deploy
      - run: npx prisma db push

      - run: npm run 
      
      - name: Run diagnostics script
        run: npm run diagnostics
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}


  test-api:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm test

      # üìÑ Outputs Jest results to Actions summary tab
      - name: Publish Jest Test Results
        uses: test-summary/action@v2
        if: always()
        with:
          paths: "test-results/jest-junit.xml"

  test-component:
    runs-on: ubuntu-latest
    needs: build  # ‚ö° Run in parallel with test-api
    strategy:
      matrix:
        browser: [chrome, edge, firefox]  # üß™ Parallel browser matrix
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Run Component Tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          command: npm run component:headless  # ‚úÖ Your custom command handles everything

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: component-videos-${{ matrix.browser }}
          path: cypress/videos/
          retention-days: 5

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: component-failures-${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 5

  test-e2e:
    runs-on: ubuntu-latest
    needs: test-api  # ‚ö° Run E2E tests without waiting for component tests
    strategy:
      matrix:
        browser: [chrome, edge, firefox]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Run E2E Tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          command: npm run e2e:headless  # ‚úÖ Replaces deprecated `e2e: true`

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-videos-${{ matrix.browser }}
          path: cypress/videos/
          retention-days: 5

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: cypress/screenshots/
          retention-days: 5

  docker-scan-and-push:
    runs-on: ubuntu-latest
    needs: [test-component, test-e2e]  # üõ°Ô∏è Only proceed if tests pass
    permissions:
      contents: read
      packages: write
      actions: read
      security-events: write
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Docker login GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          secrets: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}

      - name: Docker CVE Scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          sarif-file: sarif.output.json
          summary: true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json

  deploy-develop:
    runs-on: ubuntu-latest
    needs: docker-scan-and-push
    environment:
      name: develop
      url: http://ec2-107-23-85-12.compute-1.amazonaws.com:3000  # ‚ö†Ô∏è Secrets not allowed here
    steps:
      - name: Deploy to Develop
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd test
            docker compose -f docker-compose.test.yml pull
            docker compose -f docker-compose.test.yml up -d

  deploy-prod:
    runs-on: ubuntu-latest
    needs: docker-scan-and-push
    environment:
      name: prod
      url: http://ec2-107-23-85-12.compute-1.amazonaws.com
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd prod
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d